#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_NODES 10  

struct Queue {
    int items[MAX_NODES];
    int front, rear;
};


void initQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}


int isEmpty(struct Queue* q) {
    return q->front == -1;
}


void enqueue(struct Queue* q, int value) {
    if (q->rear == MAX_NODES - 1) {
        printf("Queue is full\n");
    } else {
        if (q->front == -1) {
            q->front = 0;
        }
        q->rear++;
        q->items[q->rear] = value;
    }
}


int dequeue(struct Queue* q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    } else {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {  
            q->front = q->rear = -1;
        }
        return item;
    }
}


struct Graph {
    int vertices;
    int adj[MAX_NODES][MAX_NODES];
};


void initGraph(struct Graph* g, int vertices) {
    g->vertices = vertices;
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            g->adj[i][j] = 0; 
        }
    }
}


void addEdge(struct Graph* g, int src, int dest) {
    g->adj[src][dest] = 1;
    g->adj[dest][src] = 1;  
}


void BFS(struct Graph* g, int start) {
    bool visited[MAX_NODES] = {false};  
    struct Queue q;
    initQueue(&q);

   
    visited[start] = true;
    enqueue(&q, start);

    printf("BFS Traversal starting from node %d: ", start);

    while (!isEmpty(&q)) {
        int node = dequeue(&q);
        printf("%d ", node);

       
        for (int i = 0; i < g->vertices; i++) {
            if (g->adj[node][i] == 1 && !visited[i]) {
                visited[i] = true;
                enqueue(&q, i);
            }
        }
    }

    printf("\n");
}

int main() {
    struct Graph g;
    int vertices = 6;

  
    initGraph(&g, vertices);

    // Add edges
    addEdge(&g, 0, 1);
    addEdge(&g, 0, 2);
    addEdge(&g, 1, 3);
    addEdge(&g, 1, 4);
    addEdge(&g, 2, 5);

    BFS(&g, 0);

    return 0;
}
