#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


struct Node* createLinkedList() {
    return NULL;
}


void insertAtFirst(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
    printf("Node with data %d inserted at the beginning.\n", data);
}


void deleteFirst(struct Node** head) {
    if (*head == NULL) {
        printf("The list is empty. Cannot delete.\n");
        return;
    }

    struct Node* temp = *head;
    *head = (*head)->next;
    printf("Node with data %d deleted from the beginning.\n", temp->data);
    free(temp);
}


void deleteElement(struct Node** head, int data) {
    if (*head == NULL) {
        printf("The list is empty. Cannot delete.\n");
        return;
    }

    struct Node* temp = *head;
    struct Node* prev = NULL;


    if (temp != NULL && temp->data == data) {
        *head = temp->next;
        printf("Node with data %d deleted.\n", temp->data);
        free(temp);
        return;
    }


    while (temp != NULL && temp->data != data) {
        prev = temp;
        temp = temp->next;
    }


    if (temp == NULL) {
        printf("Node with data %d not found.\n", data);
        return;
    }


    prev->next = temp->next;
    printf("Node with data %d deleted.\n", temp->data);
    free(temp);
}


void deleteLast(struct Node** head) {
    if (*head == NULL) {
        printf("The list is empty. Cannot delete.\n");
        return;
    }

    struct Node* temp = *head;
    struct Node* prev = NULL;


    if (temp != NULL && temp->next == NULL) {
        *head = NULL;
        printf("Node with data %d deleted from the end.\n", temp->data);
        free(temp);
        return;
    }


    while (temp->next != NULL) {
        prev = temp;
        temp = temp->next;
    }


    prev->next = NULL;
    printf("Node with data %d deleted from the end.\n", temp->data);
    free(temp);
}


void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }

    struct Node* temp = head;
    printf("Linked List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = createLinkedList();
    int choice, data;

    while (1) {
        printf("\nChoose an operation:\n");
        printf("1. Insert at First\n");
        printf("2. Delete First Node\n");
        printf("3. Delete Specified Node\n");
        printf("4. Delete Last Node\n");
        printf("5. Display the Linked List\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert at the beginning: ");
                scanf("%d", &data);
                insertAtFirst(&head, data);
                break;
            case 2:
                deleteFirst(&head);
                break;
            case 3:
                printf("Enter data to delete: ");
                scanf("%d", &data);
                deleteElement(&head, data);
                break;
            case 4:
                deleteLast(&head);
                break;
            case 5:
                displayList(head);
                break;
            case 6:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    }

    return 0;
}
